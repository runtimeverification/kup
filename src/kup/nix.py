import json
import os
import pwd
import subprocess
import sys
from dataclasses import dataclass
from typing import List, Optional, Tuple, Union

import rich

K_FRAMEWORK_CACHE = 'https://k-framework.cachix.org'
K_FRAMEWORK_PUBLIC_KEY = 'k-framework.cachix.org-1:jeyMXB2h28gpNRjuVkehg+zLj62ma1RnyyopA/20yFE='

if os.path.exists('/run/current-system/nixos-version'):
    with open('/run/current-system/nixos-version', 'r') as nixos_version:
        NIXOS_VERSION: Optional[str] = nixos_version.read()
else:
    NIXOS_VERSION = None


NIX_SUBSTITUTERS = [
    '--option',
    'extra-substituters',
    K_FRAMEWORK_CACHE,
    '--option',
    'extra-trusted-public-keys',
    (K_FRAMEWORK_PUBLIC_KEY),
]


def nix_raw(args: List[str], extra_flags: List[str] = NIX_SUBSTITUTERS, gc_dont_gc: bool = True) -> bytes:
    my_env = os.environ.copy()
    if gc_dont_gc:
        my_env['GC_DONT_GC'] = '1'
    try:
        output = subprocess.check_output(
            ['nix'] + args + ['--extra-experimental-features', 'nix-command flakes'] + extra_flags,
            env=my_env,
        )
    except subprocess.CalledProcessError as exc:
        rich.print('❗ [red]The operation could not be completed. See above for the error output ...[/]')
        sys.exit(exc.returncode)
    else:
        return output


SYSTEM = (
    nix_raw(['eval', '--impure', '--expr', 'builtins.currentSystem'], extra_flags=[])
    .decode('utf8')
    .strip()
    .replace('"', '')
)

USER = pwd.getpwuid(os.getuid())[0]
USER_IS_ROOT = os.geteuid() == 0

TRUSTED_USERS = []
CURRENT_SUBSTITUTERS = []


def check_substituters() -> Tuple[bool, bool]:
    global TRUSTED_USERS, CURRENT_SUBSTITUTERS
    try:
        result = nix_raw(['show-config', '--json'], extra_flags=[])
    except Exception:
        rich.print("⚠️ [yellow]Could not run 'nix show-config'.")
        return False, False
    config = json.loads(result)
    try:
        TRUSTED_USERS = config['trusted-users']['value']
        current_user_is_trusted = USER in TRUSTED_USERS
        CURRENT_SUBSTITUTERS = config['substituters']['value']
        has_all_substituters = 'https://k-framework.cachix.org' in CURRENT_SUBSTITUTERS
        return current_user_is_trusted, has_all_substituters
    except Exception:
        rich.print('⚠️ [yellow]Could not fetch nix substituters or figure out if the current user is trusted by nix.')
        return False, False


USER_IS_TRUSTED, CONTAINS_SUBSTITUTERS = check_substituters()

GLUE_MODULE = """# WARN: this file was generated by kup and will get overwritten automatically
{ pkgs, lib, ... }:

let
  folder = ./kup;
  toImport = name: value: folder + ("/" + name);
  filterCaches = key: value: value == "regular" && lib.hasSuffix ".nix" key;
  imports = lib.mapAttrsToList toImport (lib.filterAttrs filterCaches (builtins.readDir folder));
in {
  inherit imports;
  nix.binaryCaches = ["https://cache.nixos.org/"];
}
"""


def install_substituter_nixos(name: str, substituter: str, pub_key: str) -> None:
    nixos_path = '/etc/nixos'

    cache_module = f"""{{
  nix = {{
    binaryCaches = [
      "{substituter}"
    ];
    binaryCachePublicKeys = [
      "{pub_key}"
    ];
  }};
}}
"""

    with open('/tmp/kup.nix', 'w') as glue_file:
        glue_file.write(GLUE_MODULE)

    os.makedirs('/tmp/kup', exist_ok=True)

    with open(f'/tmp/{name}.nix', 'w') as cache_file:
        cache_file.write(cache_module)

    if not os.path.exists(f'{nixos_path}/kup'):
        subprocess.call(['sudo', 'mkdir', '-p', f'{nixos_path}/kup'])

    subprocess.call(['sudo', 'mv', '-f', f'/tmp/{name}.nix', f'{nixos_path}/kup'])
    subprocess.call(['sudo', 'mv', '-f', '/tmp/kup.nix', nixos_path])

    rich.print(
        f'The [blue]kup[/] cache configuration was successfully written to [green]{nixos_path}/kup/{name}.nix[/].\n\n'
        'To start using this cache add the following to your [green]/etc/nixos/configuration.nix[/]:\n\n'
        '   [green]imports = [ ./kup.nix ];[/]\n\n'
        'Then run:\n\n'
        '   [green]sudo nixos-rebuild switch'
    )


@dataclass(frozen=True)
class Comment:
    comment: str


@dataclass(frozen=True)
class Blank:
    pass


@dataclass(frozen=True)
class KeyVal:
    key: str
    value: str


def read_config(path: str) -> List[Union[Comment, Blank, KeyVal]]:
    conf: List[Union[Comment, Blank, KeyVal]] = []
    if not os.path.exists(path):
        return conf
    with open(path, 'r') as fp:
        for line in fp:
            stripped = line.strip()
            if stripped.startswith('#'):
                conf.append(Comment(line))
            elif '=' in line:
                key, val = stripped.split('=', 1)
                conf.append(KeyVal(key.strip(), val.strip()))
            elif not stripped:
                conf.append(Blank())
    return conf


def write_config(path: str, conf: List[Union[Comment, Blank, KeyVal]]) -> None:
    with open(path, 'w') as fp:
        for c in conf:
            if isinstance(c, Comment):
                fp.write(c.comment)
            elif isinstance(c, Blank):
                fp.write('\n')
            elif isinstance(c, KeyVal):
                fp.write(f'{c.key} = {c.value}\n')


def contains_key(config: List[Union[Comment, Blank, KeyVal]], key: str) -> bool:
    for item in config:
        if isinstance(item, KeyVal) and item.key == key:
            return True
    return False


def add_to_keyval(item: Union[Comment, Blank, KeyVal], my_dict: dict[str, str]) -> Union[Comment, Blank, KeyVal]:
    if isinstance(item, KeyVal):
        if item.key in my_dict.keys():
            return KeyVal(item.key, f'{item.value} {my_dict[item.key]}')
    return item


def install_substituter_non_nixos(conf_file: str, substituter: str, pub_key: str) -> None:
    conf = read_config(conf_file)
    if not contains_key(conf, 'substituters'):
        conf.append(KeyVal('substituters', 'https://cache.nixos.org/'))
        conf.append(KeyVal('trusted-public-keys', 'cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY='))
    new_conf = [add_to_keyval(i, {'substituters': substituter, 'trusted-public-keys': pub_key}) for i in conf]
    write_config('/tmp/nix.conf', new_conf)

    if os.path.exists(conf_file):
        subprocess.call(['sudo', 'cp', '-f', conf_file, f'{conf_file}.bak'])
    else:
        subprocess.call(['sudo', 'mkdir', '-p', os.path.dirname(conf_file)])

    subprocess.call(['sudo', 'mv', '-f', '/tmp/nix.conf', os.path.dirname(conf_file)])
    subprocess.call(['sudo', 'pkill', 'nix-daemon'])

    rich.print(f'The [blue]kup[/] cache configuration was successfully written to [green]{conf_file}[/].')


def print_substituters_warning() -> None:
    new_trusted_users = TRUSTED_USERS if USER_IS_TRUSTED else TRUSTED_USERS + [USER]
    add_user_to_trusted = ' '.join(new_trusted_users)
    add_user_to_trusted_nix = ' '.join([f'"{s}"' for s in new_trusted_users])
    rich.print(
        f'\n⚠️ [yellow] The k-framework binary cache [green]{K_FRAMEWORK_CACHE}[/] in not configured in your nix installation and\n'
        'the current user does not have sufficient permissions to add and use it.\n'
        '[blue]kup[/] relies on this cache to provide faster installation using pre-built binaries.[/]\n\n'
        'You can still install kup packages from source, however, to avoid building the packages on your local machine, consider:\n'
    )
    if NIXOS_VERSION is None:
        rich.print(
            f'1) letting [blue]kup[/] modify the nix cache configuration. You will be prompted for root access. ([green]recommended[/])\n\n'
            '2) running the following command, to add the current user as trusted:\n\n'
            f'   [green]echo "trusted-users = {add_user_to_trusted}" | sudo tee -a /etc/nix/nix.conf && sudo pkill nix-daemon[/]\n\n'
            '   and then re-running the current command.\n\n'
            '   Note: [green]/etc/nix/nix.conf[/] may not exist, in which case, you will first need to run:\n\n'
            f'   [green]sudo mkdir -p /etc/nix && touch /etc/nix/nix.conf[/]\n\n'
        )
    else:
        nix_setting = 'nix.settings.trusted-users' if NIXOS_VERSION.startswith('22') else 'nix.trustedUsers'
        rich.print(
            '1) letting [blue]kup[/] modify the nix cache configuration. You will be prompted for root access. ([green]recommended[/])\n\n'
            '2) adding/modifying the following setting in your [green]/etc/nixos/configuration.nix[/] to add the current user as trusted:\n\n'
            f'   [green]{nix_setting} = [ {add_user_to_trusted_nix} ];[/]\n\n'
            '   then rebuilding your configuration via [green]sudo nixos-rebuild switch[/] and re-running this command.'
        )

    rich.print('Please select option [1] or [2], or press any key to continue without any changes: ')


def install_substituter(name: str, substituter: str, pub_key: str) -> None:
    if USER_IS_TRUSTED:
        # no need to write the config, as we can just pass it as an extra flag.
        return

    print_substituters_warning()
    choice = input().strip().lower()

    if choice in {'1', '1)'}:
        if NIXOS_VERSION is not None:
            install_substituter_nixos(name, substituter, pub_key)
        else:
            install_substituter_non_nixos('/etc/nix/nix.conf', substituter, pub_key)
    elif choice in {'2', '2)'}:
        sys.exit(0)


# nix tends to fail on macs with a segfault so we add `GC_DONT_GC=1` if on macOS (i.e. darwin)
# The `GC_DONT_GC` simply disables the garbage collector used during evaluation of a nix
# expression. This may cause the process to run out of memory, but hasn't been observed for our
# derivations in practice, so should be ok to do.
def nix(args: List[str], is_install: bool = True) -> bytes:
    global CONTAINS_SUBSTITUTERS
    if is_install and not CONTAINS_SUBSTITUTERS:
        install_substituter('k-framework', K_FRAMEWORK_CACHE, K_FRAMEWORK_PUBLIC_KEY)
        _, CONTAINS_SUBSTITUTERS = check_substituters()

    return nix_raw(
        args,
        NIX_SUBSTITUTERS if is_install and not CONTAINS_SUBSTITUTERS and USER_IS_TRUSTED else [],
        True if 'darwin' in SYSTEM else False,
    )


def nix_detach(args: List[str]) -> None:
    my_env = os.environ.copy()
    if 'darwin' in SYSTEM:
        my_env['GC_DONT_GC'] = '1'
    nix = subprocess.check_output(['which', 'nix']).decode('utf8').strip()
    extra_flags = NIX_SUBSTITUTERS if not CONTAINS_SUBSTITUTERS and USER_IS_TRUSTED else []
    os.execve(nix, [nix] + args + ['--extra-experimental-features', 'nix-command flakes'] + extra_flags, my_env)
